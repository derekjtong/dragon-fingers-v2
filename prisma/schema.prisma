// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isAdmin        Boolean   @default(false)
  Stats          Stats?

  accounts     Account[]
  ownedMatches Match[]       @relation(name: "MatchOwner")
  Participant  Participant[]
  wonMatches   Match[]       @relation(name: "MatchWinner")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Stats {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @unique @db.ObjectId
  averageSpeed  Float?
  bestSpeed     Float?
  matchesPlayed Int    @default(0)
  matchesWon    Int    @default(0)

  user User @relation(fields: [userId], references: [id])
}

model Text {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  text   String
  source String
  length Int

  matches Match[] @relation("TextMatches")
}

model Match {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  ownerId      String    @db.ObjectId
  textId       String    @db.ObjectId
  open         Boolean   @default(true)
  createdAt    DateTime  @default(now())
  startTime    DateTime?
  endTime      DateTime?
  winnerUserId String?   @db.ObjectId

  owner        User?         @relation(name: "MatchOwner", fields: [ownerId], references: [id])
  winner       User?         @relation(name: "MatchWinner", fields: [winnerUserId], references: [id])
  text         Text          @relation("TextMatches", fields: [textId], references: [id])
  participants Participant[]
  userId       String?       @db.ObjectId
}

model Participant {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  matchId  String @db.ObjectId
  userId   String @db.ObjectId
  speed    Float?
  accuracy Float?

  match Match @relation(fields: [matchId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}
